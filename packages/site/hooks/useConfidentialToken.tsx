"use client";

import { ethers, parseUnits, formatUnits } from "ethers";
import {
  RefObject,
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState,
} from "react";

import { FhevmInstance } from "@/fhevm/fhevmTypes";
import { FhevmDecryptionSignature } from "@/fhevm/FhevmDecryptionSignature";
import { GenericStringStorage } from "@/fhevm/GenericStringStorage";

export type ClearValueType = {
  handle: string;
  clear: string | bigint | boolean;
};

type ConfidentialTokenInfoType = {
  abi: any; // Will be generated by genabi script
  address?: `0x${string}`;
  chainId?: number;
  chainName?: string;
};

/*
  The following two files are automatically generated by the script located at 
  <root>/scripts/genabiConfidentialToken.mjs. This script parses the 
  <root>/packages/fhevm-hardhat-template/deployments directory to retrieve 
  deployment information for ConfidentialToken.sol:
  
  - <root>/packages/site/abi/abi/ConfidentialTokenABI.ts
  - <root>/packages/site/abi/abi/ConfidentialTokenAddresses.ts
*/
import { ConfidentialTokenFixedAddresses } from "@/abi/ConfidentialTokenFixedAddresses";
import { ConfidentialTokenFixedABI } from "@/abi/ConfidentialTokenFixedABI";

/**
 * Resolves ConfidentialToken contract metadata for the given EVM `chainId`.
 *
 * The ABI and address book are **generated** from the `fhevm-hardhat-template`
 * artifacts into the `@/abi` folder at build time. This function performs a
 * simple lookup in that generated map.
 *
 * Behavior:
 * - If `chainId` is `undefined` or not found in the map, returns ABI only.
 * - Otherwise returns `{ abi, address, chainId, chainName }`.
 *
 * @param chainId - Target chain id (e.g., 1, 5, 11155111). `undefined` returns ABI-only.
 * @returns Contract info for the chain or ABI-only fallback.
 * @example
 * const { abi, address } = getConfidentialTokenByChainId(chainId);
 */
function getConfidentialTokenByChainId(
  chainId: number | undefined
): ConfidentialTokenInfoType {
  if (!chainId) {
    return { abi: ConfidentialTokenFixedABI.abi };
  }

  const entry =
    ConfidentialTokenFixedAddresses[chainId.toString() as keyof typeof ConfidentialTokenFixedAddresses];

  if (!("address" in entry) || entry.address === ethers.ZeroAddress) {
    return { abi: ConfidentialTokenFixedABI.abi, chainId };
  }

  return {
    address: entry?.address as `0x${string}` | undefined,
    chainId: entry?.chainId ?? chainId,
    chainName: entry?.chainName,
    abi: ConfidentialTokenFixedABI.abi,
  };
}

/**
 * React hook for interacting with ConfidentialToken contract
 * Provides functionality for:
 * - Minting confidential tokens
 * - Transferring confidential tokens
 * - Decrypting own balance
 * - Initializing addresses
 */
export const useConfidentialToken = (parameters: {
  instance: FhevmInstance | undefined;
  fhevmDecryptionSignatureStorage: GenericStringStorage;
  eip1193Provider: ethers.Eip1193Provider | undefined;
  chainId: number | undefined;
  ethersSigner: ethers.JsonRpcSigner | undefined;
  ethersReadonlyProvider: ethers.ContractRunner | undefined;
  sameChain: RefObject<(chainId: number | undefined) => boolean>;
  sameSigner: RefObject<
    (ethersSigner: ethers.JsonRpcSigner | undefined) => boolean
  >;
}) => {
  const {
    instance,
    fhevmDecryptionSignatureStorage,
    chainId,
    ethersSigner,
    ethersReadonlyProvider,
    sameChain,
    sameSigner,
  } = parameters;

  //////////////////////////////////////////////////////////////////////////////
  // States + Refs
  //////////////////////////////////////////////////////////////////////////////

  const [balanceHandle, setBalanceHandle] = useState<string | undefined>(undefined);
  const [clearBalance, setClearBalance] = useState<ClearValueType | undefined>(
    undefined
  );
  const clearBalanceRef = useRef<ClearValueType>(undefined);
  const [isRefreshing, setIsRefreshing] = useState<boolean>(false);
  const [isDecrypting, setIsDecrypting] = useState<boolean>(false);
  const [isMinting, setIsMinting] = useState<boolean>(false);
  const [isTransferring, setIsTransferring] = useState<boolean>(false);
  const [isInitializing, setIsInitializing] = useState<boolean>(false);
  const [message, setMessage] = useState<string>("");

  const confidentialTokenRef = useRef<ConfidentialTokenInfoType | undefined>(undefined);
  const isRefreshingRef = useRef<boolean>(isRefreshing);
  const isDecryptingRef = useRef<boolean>(isDecrypting);
  const isMintingRef = useRef<boolean>(isMinting);
  const isTransferringRef = useRef<boolean>(isTransferring);
  const isInitializingRef = useRef<boolean>(isInitializing);

  const isDecrypted = balanceHandle && balanceHandle === clearBalance?.handle;

  //////////////////////////////////////////////////////////////////////////////
  // ConfidentialToken Contract
  //////////////////////////////////////////////////////////////////////////////

  const confidentialToken = useMemo(() => {
    const c = getConfidentialTokenByChainId(chainId);
    confidentialTokenRef.current = c;

    if (!c.address) {
      setMessage(`ConfidentialToken deployment not found for chainId=${chainId}.`);
    }

    return c;
  }, [chainId]);

  //////////////////////////////////////////////////////////////////////////////
  // Contract Status
  //////////////////////////////////////////////////////////////////////////////

  const isDeployed = useMemo(() => {
    if (!confidentialToken) {
      return undefined;
    }
    return Boolean(confidentialToken.address) && confidentialToken.address !== ethers.ZeroAddress;
  }, [confidentialToken]);

  const canGetBalance = useMemo(() => {
    return confidentialToken.address && ethersReadonlyProvider && !isRefreshing;
  }, [confidentialToken.address, ethersReadonlyProvider, isRefreshing]);

  //////////////////////////////////////////////////////////////////////////////
  // Balance Handle
  //////////////////////////////////////////////////////////////////////////////

  const refreshBalanceHandle = useCallback(() => {
    console.log("[useConfidentialToken] call refreshBalanceHandle()");
    if (isRefreshingRef.current) {
      return;
    }

    if (
      !confidentialTokenRef.current ||
      !confidentialTokenRef.current?.chainId ||
      !confidentialTokenRef.current?.address ||
      !ethersReadonlyProvider ||
      !ethersSigner
    ) {
      setBalanceHandle(undefined);
      return;
    }

    isRefreshingRef.current = true;
    setIsRefreshing(true);

    const thisChainId = confidentialTokenRef.current.chainId;
    const thisTokenAddress = confidentialTokenRef.current.address;

    const thisTokenContract = new ethers.Contract(
      thisTokenAddress,
      confidentialTokenRef.current.abi,
      ethersReadonlyProvider
    );

    // Get encrypted balance handle
    thisTokenContract
      .getEncryptedBalance(ethersSigner.address)
      .then((value) => {
        console.log("[useConfidentialToken] getEncryptedBalance()=" + value);
        if (
          sameChain.current(thisChainId) &&
          thisTokenAddress === confidentialTokenRef.current?.address
        ) {
          setBalanceHandle(value);
        }

        isRefreshingRef.current = false;
        setIsRefreshing(false);
      })
      .catch((e) => {
        setMessage("ConfidentialToken.getEncryptedBalance() call failed! error=" + e);
        isRefreshingRef.current = false;
        setIsRefreshing(false);
      });
  }, [ethersReadonlyProvider, ethersSigner, sameChain]);

  // Remove auto-refresh to prevent infinite loop
  // Balance will only be refreshed when user clicks "Refresh Balance" button

  //////////////////////////////////////////////////////////////////////////////
  // Balance Decryption
  //////////////////////////////////////////////////////////////////////////////

  const canDecrypt = useMemo(() => {
    return (
      confidentialToken.address &&
      instance &&
      ethersSigner &&
      !isRefreshing &&
      !isDecrypting &&
      balanceHandle &&
      balanceHandle !== ethers.ZeroHash &&
      balanceHandle !== clearBalance?.handle
    );
  }, [
    confidentialToken.address,
    instance,
    ethersSigner,
    isRefreshing,
    isDecrypting,
    balanceHandle,
    clearBalance,
  ]);

  const decryptBalanceHandle = useCallback(() => {
    if (isRefreshingRef.current || isDecryptingRef.current) {
      return;
    }

    if (!confidentialToken.address || !instance || !ethersSigner) {
      return;
    }

    if (balanceHandle === clearBalanceRef.current?.handle) {
      return;
    }

    if (!balanceHandle) {
      setClearBalance(undefined);
      clearBalanceRef.current = undefined;
      return;
    }

    if (balanceHandle === ethers.ZeroHash) {
      setClearBalance({ handle: balanceHandle, clear: BigInt(0) });
      clearBalanceRef.current = { handle: balanceHandle, clear: BigInt(0) };
      return;
    }

    const thisChainId = chainId;
    const thisTokenAddress = confidentialToken.address;
    const thisBalanceHandle = balanceHandle;
    const thisEthersSigner = ethersSigner;

    isDecryptingRef.current = true;
    setIsDecrypting(true);
    setMessage("Start decrypt balance");

    const run = async () => {
      const isStale = () =>
        thisTokenAddress !== confidentialTokenRef.current?.address ||
        !sameChain.current(thisChainId) ||
        !sameSigner.current(thisEthersSigner);

      try {
        // 0) Ensure user has decrypt permission
        const tokenContract = confidentialTokenRef.current;
        if (!tokenContract) {
          setMessage("No contract available");
          return;
        }
        
        // Check if function exists and call it
        if (typeof tokenContract.allowSelfBalanceDecrypt === 'function') {
          console.log("Calling allowSelfBalanceDecrypt...");
          await tokenContract.allowSelfBalanceDecrypt();
          console.log("allowSelfBalanceDecrypt completed");
        } else {
          console.log("allowSelfBalanceDecrypt not available, trying to find alternative...");
          // Try alternative function names
          if (typeof tokenContract.allowSelfBalanceDecrypt === 'function') {
            await tokenContract.allowSelfBalanceDecrypt();
          } else if (typeof tokenContract.allowBalanceDecrypt === 'function') {
            await tokenContract.allowBalanceDecrypt();
          } else {
            console.log("No allow function found, proceeding without permission...");
          }
        }

        // 1) Generate temporary keypair & EIP-712
        const keypair = instance.generateKeypair();
        const start = Math.floor(Date.now() / 1000).toString();
        const durationDays = "7";

        const eip712 = instance.createEIP712(
          keypair.publicKey,
          [thisTokenAddress],
          start,
          durationDays
        );

        // 2) Sign typed data
        const sig = await thisEthersSigner.signTypedData(
          eip712.domain,
          { UserDecryptRequestVerification: eip712.types.UserDecryptRequestVerification },
          eip712.message
        );

        if (isStale()) {
          setMessage("Ignore FHEVM decryption");
          return;
        }

        setMessage("Call FHEVM userDecrypt...");

        // 3) Call userDecrypt
        const res = await instance.userDecrypt(
          [{ handle: thisBalanceHandle, contractAddress: thisTokenAddress }],
          keypair.privateKey,
          keypair.publicKey,
          sig.replace("0x", ""),
          [thisTokenAddress],
          await thisEthersSigner.getAddress(),
          start,
          durationDays
        );

        setMessage("FHEVM userDecrypt completed!");

        if (isStale()) {
          setMessage("Ignore FHEVM decryption");
          return;
        }

        setClearBalance({ handle: thisBalanceHandle, clear: res[thisBalanceHandle] });
        clearBalanceRef.current = {
          handle: thisBalanceHandle,
          clear: res[thisBalanceHandle],
        };

        setMessage("Balance decrypted: " + clearBalanceRef.current.clear);
      } finally {
        isDecryptingRef.current = false;
        setIsDecrypting(false);
      }
    };

    run();
  }, [
    fhevmDecryptionSignatureStorage,
    ethersSigner,
    confidentialToken.address,
    instance,
    balanceHandle,
    chainId,
    sameChain,
    sameSigner,
  ]);

  //////////////////////////////////////////////////////////////////////////////
  // Initialize Address
  //////////////////////////////////////////////////////////////////////////////

  const canInitialize = useMemo(() => {
    return (
      confidentialToken.address &&
      ethersSigner &&
      !isInitializing
    );
  }, [confidentialToken.address, ethersSigner, isInitializing]);

  const initializeAddress = useCallback((address: string) => {
    if (isInitializingRef.current) {
      return;
    }

    if (!confidentialToken.address || !ethersSigner) {
      return;
    }

    const thisChainId = chainId;
    const thisTokenAddress = confidentialToken.address;
    const thisEthersSigner = ethersSigner;

    const tokenContract = new ethers.Contract(
      thisTokenAddress,
      confidentialToken.abi,
      thisEthersSigner
    );

    isInitializingRef.current = true;
    setIsInitializing(true);
    setMessage(`Initializing address ${address}...`);

    const run = async () => {
      const isStale = () =>
        thisTokenAddress !== confidentialTokenRef.current?.address ||
        !sameChain.current(thisChainId) ||
        !sameSigner.current(thisEthersSigner);

      try {
        const tx = await tokenContract.initializeAddress(address);
        setMessage(`Wait for tx:${tx.hash}...`);

        const receipt = await tx.wait();
        setMessage(`Address initialized! status=${receipt?.status}`);

        if (isStale()) {
          setMessage("Ignore initialization");
          return;
        }

        refreshBalanceHandle();
      } catch (e) {
        setMessage(`Initialization failed: ${e}`);
      } finally {
        isInitializingRef.current = false;
        setIsInitializing(false);
      }
    };

    run();
  }, [
    ethersSigner,
    confidentialToken.address,
    confidentialToken.abi,
    chainId,
    refreshBalanceHandle,
    sameChain,
    sameSigner,
  ]);

  //////////////////////////////////////////////////////////////////////////////
  // Mint Confidential Tokens
  //////////////////////////////////////////////////////////////////////////////

  const canMint = useMemo(() => {
    return (
      confidentialToken.address &&
      instance &&
      ethersSigner &&
      !isRefreshing &&
      !isMinting
    );
  }, [confidentialToken.address, instance, ethersSigner, isRefreshing, isMinting]);

  const mintConfidential = useCallback((to: string, amount: number) => {
    if (isRefreshingRef.current || isMintingRef.current) {
      return;
    }

    if (!confidentialToken.address || !instance || !ethersSigner || amount <= 0) {
      return;
    }

    const thisChainId = chainId;
    const thisTokenAddress = confidentialToken.address;
    const thisEthersSigner = ethersSigner;

    const tokenContract = new ethers.Contract(
      thisTokenAddress,
      confidentialToken.abi,
      thisEthersSigner
    );

    isMintingRef.current = true;
    setIsMinting(true);
    setMessage(`Minting ${amount} tokens to ${to}...`);

    const run = async () => {
      await new Promise((resolve) => setTimeout(resolve, 100));

      const isStale = () =>
        thisTokenAddress !== confidentialTokenRef.current?.address ||
        !sameChain.current(thisChainId) ||
        !sameSigner.current(thisEthersSigner);

      try {
        console.log("[DEBUG] Creating encrypted input...");
        console.log("[DEBUG] Contract address:", thisTokenAddress);
        console.log("[DEBUG] User address:", thisEthersSigner.address);
        console.log("[DEBUG] Amount:", amount);
        console.log("[DEBUG] Chain ID:", thisChainId);
        
        // Use getAddress() instead of .address for proper async handling
        const from = await thisEthersSigner.getAddress();
        console.log("[DEBUG] From address (async):", from);
        
        // Debug: Log all context before encrypt
        console.log("[DEBUG] ENC.contract =", thisTokenAddress);
        console.log("[DEBUG] ENC.user     =", from);
        console.log("[DEBUG] tx.to        =", tokenContract.target);
        console.log("[DEBUG] chainId      =", thisChainId);
        
        const input = instance.createEncryptedInput(
          thisTokenAddress,
          from
        );
        // Use parseUnits to properly scale amount with contract decimals
        const scaledAmount = parseUnits(amount.toString(), 6); // Contract has 6 decimals
        console.log("[DEBUG] Scaled amount (BigInt):", scaledAmount);
        console.log("[DEBUG] Scaled amount (human readable):", formatUnits(scaledAmount, 6), "CT");
        
        // No amount limit - token has infinite supply
        input.add64(scaledAmount);

        console.log("[DEBUG] Encrypting input...");
        const enc = await input.encrypt();
        console.log("[DEBUG] Encryption successful:", enc);

        if (isStale()) {
          setMessage("Ignore mint");
          return;
        }

        setMessage(`Call mintConfidential...`);

        const tx = await tokenContract.mintConfidential(
          to,
          enc.handles[0],
          enc.inputProof
        );

        setMessage(`Wait for tx:${tx.hash}...`);

        const receipt = await tx.wait();
        setMessage(`Mint completed! status=${receipt?.status}`);

        if (isStale()) {
          setMessage("Ignore mint");
          return;
        }

        refreshBalanceHandle();
      } catch (e) {
        setMessage(`Mint failed: ${e}`);
      } finally {
        isMintingRef.current = false;
        setIsMinting(false);
      }
    };

    run();
  }, [
    ethersSigner,
    confidentialToken.address,
    confidentialToken.abi,
    instance,
    chainId,
    refreshBalanceHandle,
    sameChain,
    sameSigner,
  ]);

  //////////////////////////////////////////////////////////////////////////////
  // Transfer Confidential Tokens
  //////////////////////////////////////////////////////////////////////////////

  const canTransfer = useMemo(() => {
    return (
      confidentialToken.address &&
      instance &&
      ethersSigner &&
      !isRefreshing &&
      !isTransferring
    );
  }, [confidentialToken.address, instance, ethersSigner, isRefreshing, isTransferring]);

  const transferConfidential = useCallback((to: string, amount: number) => {
    if (isRefreshingRef.current || isTransferringRef.current) {
      return;
    }

    if (!confidentialToken.address || !instance || !ethersSigner || amount <= 0) {
      return;
    }

    const thisChainId = chainId;
    const thisTokenAddress = confidentialToken.address;
    const thisEthersSigner = ethersSigner;

    const tokenContract = new ethers.Contract(
      thisTokenAddress,
      confidentialToken.abi,
      thisEthersSigner
    );

    isTransferringRef.current = true;
    setIsTransferring(true);
    setMessage(`Transferring ${amount} tokens to ${to}...`);

    const run = async () => {
      await new Promise((resolve) => setTimeout(resolve, 100));

      const isStale = () =>
        thisTokenAddress !== confidentialTokenRef.current?.address ||
        !sameChain.current(thisChainId) ||
        !sameSigner.current(thisEthersSigner);

      try {
        // Use getAddress() instead of .address for proper async handling
        const from = await thisEthersSigner.getAddress();
        
        // Debug: Log all context before encrypt
        console.log("[DEBUG] TRANSFER - ENC.contract =", thisTokenAddress);
        console.log("[DEBUG] TRANSFER - ENC.user     =", from);
        console.log("[DEBUG] TRANSFER - tx.to        =", tokenContract.target);
        console.log("[DEBUG] TRANSFER - chainId      =", thisChainId);
        
        const input = instance.createEncryptedInput(
          thisTokenAddress,
          from
        );
        // Use parseUnits to properly scale amount with contract decimals
        const scaledAmount = parseUnits(amount.toString(), 6); // Contract has 6 decimals
        console.log("[DEBUG] TRANSFER - Scaled amount:", scaledAmount);
        input.add64(scaledAmount);

        const enc = await input.encrypt();

        if (isStale()) {
          setMessage("Ignore transfer");
          return;
        }

        setMessage(`Call transferConfidential...`);

        const tx = await tokenContract.transferConfidential(
          to,
          enc.handles[0],
          enc.inputProof
        );

        setMessage(`Wait for tx:${tx.hash}...`);

        const receipt = await tx.wait();
        setMessage(`Transfer completed! status=${receipt?.status}`);

        if (isStale()) {
          setMessage("Ignore transfer");
          return;
        }

        refreshBalanceHandle();
      } catch (e) {
        setMessage(`Transfer failed: ${e}`);
      } finally {
        isTransferringRef.current = false;
        setIsTransferring(false);
      }
    };

    run();
  }, [
    ethersSigner,
    confidentialToken.address,
    confidentialToken.abi,
    instance,
    chainId,
    refreshBalanceHandle,
    sameChain,
    sameSigner,
  ]);

  // Reset decryption session
  const resetDecryptSession = useCallback(() => {
    fhevmDecryptionSignatureStorage.resetAll([
      "priv", "pub", "sig", "user", "start", "days"
    ]);
    setClearBalance(undefined);
    setMessage("Decryption session reset. Please try again.");
  }, [fhevmDecryptionSignatureStorage]);

  return {
    contractAddress: confidentialToken.address,
    canDecrypt,
    canGetBalance,
    canInitialize,
    canMint,
    canTransfer,
    initializeAddress,
    mintConfidential,
    transferConfidential,
    decryptBalanceHandle,
    refreshBalanceHandle,
    resetDecryptSession,
    isDecrypted,
    message,
    clear: clearBalance?.clear,
    handle: balanceHandle,
    isDecrypting,
    isRefreshing,
    isMinting,
    isTransferring,
    isInitializing,
    isDeployed,
  };
};
